from typing import TYPE_CHECKING

import pytest

from rss_to_webhook.db_types import Comic
from rss_to_webhook.discord_types import Message
from rss_to_webhook.worker import make_body

if TYPE_CHECKING:
    from feedparser.util import Entry


@pytest.fixture()
def comic():
    return Comic(
        name="Test Webcomic",
        url="https://example.com/rss",
        hash=b"\xa9\x0c\x16\xe5\xe2\x8c6\xdd\x01}K\x85\x1fn\x8e\xd2",
        last_entries=["https://example.com/page/0"],
    )


def test_happy_path(comic: Comic):
    """
    This is just the normal usage.

    Test asserts that `make_body` functions on the happy path.
    """
    entry: Entry = {"link": "https://example.com/page/1", "title": "Page 1!"}
    body = make_body(comic, entry)
    # The Message() is just for show (underhanded cheats to increase our code coverage)
    assert body == Message(
        {
            "embeds": [
                {
                    "color": 0x5C64F4,
                    "title": "**Page 1!**",
                    "url": "https://example.com/page/1",
                    "description": "New Test Webcomic!",
                },
            ],
        }
    )


def test_bad_url_scheme(comic: Comic):
    """
    This is a regression test for
    [13a7171](https://github.com/mymoomin/RSStoWebhook/commit/13a7171be8f19164902a36e1f5abd587f852a303),
    where a bad url scheme caused the service to fail for multiple days.

    Test asserts that `make_body` will correct bad url schemes.
    """
    entry: Entry = {"link": "hps://example.com/page/1", "title": "Page 1!"}
    body = make_body(comic, entry)
    assert body == {
        "embeds": [
            {
                "color": 0x5C64F4,
                "title": "**Page 1!**",
                "url": "https://example.com/page/1",
                "description": "New Test Webcomic!",
            },
        ],
    }


def test_no_title(comic: Comic):
    """
    This is a regression test for
    [0249766](https://github.com/mymoomin/RSStoWebhook/commit/0249766c715879891e3d21bb61bc537839020f5b),
    where a missing entry title caused the embed to not have a title.

    Test asserts that even without a title the embed has a title.
    """
    entry: Entry = {"link": "hps://example.com/page/1"}
    body = make_body(comic, entry)
    assert body == {
        "embeds": [
            {
                "color": 0x5C64F4,
                "title": "**Test Webcomic**",
                "url": "https://example.com/page/1",
                "description": "New Test Webcomic!",
            },
        ],
    }


# GPT tests
@pytest.mark.parametrize(
    ("comic", "entry", "expected_output"),
    [
        # Test case 1: Minimal input
        (
            {
                "name": "Comic1",
                "url": "https://example.com/comic1",
                "author": {"name": "Author1", "url": "https://example.com/icon"},
            },
            {
                "link": "https://example.com/entry1",
                "id": "1",
                "title": "Entry 1",
                "published": "2023-09-27",
            },
            {
                "embeds": [
                    {
                        "color": 0x5C64F4,
                        "title": "**Entry 1**",
                        "url": "https://example.com/entry1",
                        "description": "New Comic1!",
                    },
                ],
                "username": "Author1",
                "avatar_url": "https://example.com/icon",
            },
        ),
        # Test case 2: Test with role_id and thread_id
        (
            {
                "name": "Comic2",
                "url": "https://example.com/comic2",
                "role_id": 123,
                "author": {"name": "Author2", "url": "https://example.com/icon"},
            },
            {
                "link": "https://example.com/entry2",
                "id": "2",
                "title": "Entry 2",
                "published": "2023-09-28",
            },
            {
                "embeds": [
                    {
                        "color": 0x5C64F4,
                        "title": "**Entry 2**",
                        "url": "https://example.com/entry2",
                        "description": "New Comic2!",
                    },
                ],
                "username": "Author2",
                "avatar_url": "https://example.com/icon",
                "content": "<@&123>",
            },
        ),
    ],
)
def test_gpt_make_body(comic: Comic, entry, expected_output):
    """
    These tests were generated by ChatGPT. I'm not sure how much value they add but I'm
    keeping them for now.

    Tests general usage
    """
    result = make_body(comic, entry)
    assert result == expected_output
